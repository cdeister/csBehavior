def runTrialOptoTask():
	
	cTime = datetime.datetime.now()
	dStamp=cTime.strftime("%m_%d_%Y")
	curMachine=csVar.getRig()
	curTime = 0
	curStateTime = 0
	curInt = 0


	makeTrialVariables()
	
	if useGUI==1:
		csPlt.makeTrialFig_detection(csVar.sesVarDict['detectPlotNum'])
		csVar.sesVarDict=csGui.updateDictFromGUI(csVar.sesVarDict)
	elif useGUI==0:
		config.read(sys.argv[1])
		csVar.sesVarDict=csVar.updateDictFromTXT(csVar.sesVarDict,config)
	
	[teensy,tTeensyState] = initializeTeensy()
	initializeLoadCell()
	mqttStart()
	
	# Set some session flow variables before the task begins
	# Turn the session on. 
	csVar.sesVarDict['sessionOn']=1
	csVar.sesVarDict['canQuit']=0

	if useGUI==1:
		csGui.quitButton['text']="End Ses"
	
	csVar.sesVarDict['sampRate']=1000
	csVar.sesVarDict['maxDur']=3600*2*csVar.sesVarDict['sampRate']
	npSamps=csVar.sesVarDict['maxDur']
	sesData = np.memmap('cur.npy', mode='w+',dtype=np.int32,\
		shape=(npSamps,csVar.sesVarDict['dStreams']))
	np.save('sesData.npy',sesData)

	# Make HDF
	f=csSesHDF.makeHDF(csVar.sesVarDict['dirPath'] +'/',csVar.sesVarDict['subjID'] + '_ses{}'.\
		format(csVar.sesVarDict['curSession']),dStamp)

	pyState=csVar.sesVarDict['startState']

	# task-specific local variables
	lastLick=0
	lickCounter=0

	sList=[0,1,2,3,4,5,6,7,8]
	sHeaders=np.zeros(len(sList))
	trialSamps=[0,0]
	
	serialBuf=bytearray()
	sampLog=[]
	if useGUI==1:
		csGui.toggleTaskButtons(0)
	stimTrials=[]
	maskTrials=[]
	loopCnt=0
	csVar.sesVarDict['trialNum']=0
	csVar.sesVarDict['lickLatchA']=0
	outSyncCount=0
	serialVarTracker = [0,0,0,0,0,0]
	
	sessionStarted = 0
	# Send to 1, wait state.
	teensy.write('a1>'.encode('utf-8')) 
	
	# now we can start a session.
	while csVar.sesVarDict['sessionOn']:
		# try to execute the task.
		try:
			updateDetectionTaskVars()
			[serialBuf,eR,tString]=csSer.readSerialBuffer(teensy,serialBuf,csVar.sesVarDict['serBufSize'])
			if len(tString)==csVar.sesVarDict['dStreams']-1:

				# handle timing stuff
				intNum = int(tString[1])
				tTime = int(tString[2])
				tStateTime=int(tString[3])
				# if time did not go backward (out of order packet) then increment python time, int, and state time.
				if tTime >= curTime:
					curTime = tTime
					cutInt = intNum
					curStateTime = tStateTime
				
				# check the teensy state
				tTeensyState=int(tString[4])
		

				tFrameCount=0  # Todo: frame counter in.
				# even if the the data came out of order, we need to assign it to the right part of the array.
				for x in range(0,csVar.sesVarDict['dStreams']-2):
					sesData[intNum,x]=int(tString[x+1])
				sesData[intNum,csVar.sesVarDict['dStreams']-2]=pyState # The state python wants to be.
				sesData[intNum,csVar.sesVarDict['dStreams']-1]=0 # Thresholded licks
				loopCnt=loopCnt+1
				
				# d) If we are using the GUI plot updates ever so often.
				if useGUI==1:
					plotSamps=csVar.sesVarDict['plotSamps']
					updateCount=csVar.sesVarDict['updateCount']
					lyMin=-1
					lyMax=4098
					if csVar.sesVarDict['chanPlot']==11 or csVar.sesVarDict['chanPlot']==7:
						lyMin=-0.1
						lyMax=1.1
					if loopCnt>plotSamps and np.mod(loopCnt,updateCount)==0:
						if csVar.sesVarDict['chanPlot']==0:
							csPlt.quickUpdateTrialFig(csVar.sesVarDict['trialNum'],\
								csVar.sesVarDict['totalTrials'],tTeensyState)
						elif csVar.sesVarDict['chanPlot'] != 0:
							csPlt.updateTrialFig(np.arange(len(sesData[loopCnt-plotSamps:loopCnt,\
								csVar.sesVarDict['chanPlot']])),sesData[loopCnt-plotSamps:loopCnt,\
							csVar.sesVarDict['chanPlot']],csVar.sesVarDict['trialNum'],\
								csVar.sesVarDict['totalTrials'],tTeensyState,[lyMin,lyMax])


				# e) Lick detection. This can be done in hardware, but I like software because thresholds can be dynamic.
				latchTime=50
				if sesData[cutInt,5]>=csVar.sesVarDict['lickAThr'] and csVar.sesVarDict['lickLatchA']==0:
					sesData[cutInt,csVar.sesVarDict['dStreams']-1]=1
					csVar.sesVarDict['lickLatchA']=latchTime
					# these are used in states
					lickCounter=lickCounter+1
					lastLick=curStateTime

				elif csVar.sesVarDict['lickLatchA']>0:
					csVar.sesVarDict['lickLatchA']=csVar.sesVarDict['lickLatchA']-1

				# f) Resolve state.
				# if the python side's desired state differs from the actual Teensy state
				# then note in python we are out of sync, and try again next loop.
				if pyState == tTeensyState:
					stateSync=1
				elif pyState != tTeensyState:
					stateSync=0

				# If we are out of sync for too long, then push another change over the serial line.
				# ******* This is a failsafe, but it shouldn't really happen.
				if stateSync==0:
					outSyncCount=outSyncCount+1
					if outSyncCount>=200:
						teensy.write('a{}>'.format(pyState).encode('utf-8'))  

				# 4) Now look at what state you are in and evaluate accordingly
				if pyState == 1 and stateSync==1:
					
					if sHeaders[pyState]==0:
						
						
						# if useGUI==1:
							# csPlt.updateStateFig(1)
						trialSamps[0]=loopCnt-1

						# reset counters that track state stuff.                 
						outSyncCount=0

						# g) Trial resolution.
						# Some things we want to do once per trial. csBehavior has a soft concept of trial.
						# This is because it is a state machine and is an ongoing dynmaic process. But, 
						# we can define a trial any way we like. We define an elapsed trial as:
						# any tranistion from state 1, to any other state or states, and back to state 1. 
						# Thus, when you start the session, you have not finished a trial, you just started it. 
						# We can do things we want to do once when we start new trials, here is state 1's header. 
	
						# 1) determine the current trial's visual and state timing variables.
						# 	note we have not incremented the trialNum, which should start at 0, 
						# 	thus we are indexing the array correctly without using a -1. 
						
						tTrial = csVar.sesVarDict['trialNum']
						getThisTrialsVariables(tTrial)	
						
						if csVar.c1_mask[tTrial]==2:
							csVar.c1_amp[tTrial]=0
							csVar.c2_amp[tTrial]=csVar.c2_amp[tTrial]
							stimTrials.append(1)
							maskTrials.append(0)
							print("optical --> mask trial; LED_C1: {}V; C2 {}V"\
								.format(5.0*(csVar.c1_amp[tTrial]/4095),5.0*(csVar.c2_amp[tTrial]/4095)))

						elif csVar.c1_mask[tTrial]!=2:
							csVar.c1_amp[tTrial]=csVar.c1_amp[tTrial]
							csVar.c2_amp[tTrial]=0
							stimTrials.append(0)
							maskTrials.append(1)
							print("optical --> stim trial; LED_C1: {}V; C2 {}V"\
								.format(5.0*(csVar.c1_amp[tTrial]/4095),5.0*(csVar.c2_amp[tTrial]/4095)))


						csVar.sesVarDict['minStim']=csVar.opticalStimTime[tTrial]
						waitTime = csVar.trialTime[tTrial]
						# lickWaitTime = csVar.noLickTime[tTrial]

						serialVarTracker = [0,0,0,0,0,0]

						# 2) if we aren't using the GUI, we can still change variables, like the number of trials etc.
						# in the text file. However, we shouldn't poll all the time because we have to reopen the file each time. 
						# We do so here. 
						if useGUI==0:
							config.read(sys.argv[1])
							csVar.sesVarDict['totalTrials'] = int(config['sesVars']['totalTrials'])

							if csVar.sesVarDict['trialNum']>csVar.sesVarDict['totalTrials']:
								csVar.sesVarDict['sessionOn']=0
						
						# 3) incrment the trial count and 
						csVar.sesVarDict['trialNum']=csVar.sesVarDict['trialNum']+1

						# 4) inform the user via the terminal what's going on.
						print('starting trial #{} of {}'.format(csVar.sesVarDict['trialNum'],\
							csVar.sesVarDict['totalTrials']))
						print('estimated trial time = {:0.3f} seconds'.format((csVar.noLickTime[tTrial] + csVar.trialTime[tTrial])*0.001))

						# close the header and flip the others open.
						sHeaders[pyState]=1
						sHeaders[np.setdiff1d(sList,pyState)]=0

					elif serialVarTracker[2] == 0 and curStateTime>=100:
						optoVoltages = [int(csVar.c1_amp[tTrial]),int(csVar.c2_amp[tTrial])]
						csSer.sendAnalogOutValues(teensy,'v',optoVoltages)
						serialVarTracker[2] = 1

					elif serialVarTracker[3] == 0 and curStateTime>=510:
						optoPulseDurs = [int(csVar.c1_pulseDur[tTrial]),int(csVar.c2_pulseDur[tTrial])]
						csSer.sendAnalogOutValues(teensy,'p',optoPulseDurs)
						serialVarTracker[3] = 1

					elif serialVarTracker[4] == 0 and curStateTime>=910:
						optoIPIs = [int(csVar.c1_interPulseDur[tTrial]),int(csVar.c2_interPulseDur[tTrial])]
						csSer.sendAnalogOutValues(teensy,'d',optoIPIs)
						serialVarTracker[4] = 1

					#elif serialVarTracker[5] == 0 and curStateTime>=610:
					#	optoPulseNum = [int(csVar.c1_pulseCount[tTrial]),int(csVar.c2_pulseCount[tTrial])]
					#	csSer.sendAnalogOutValues(teensy,'m',optoPulseNum)
					#	serialVarTracker[5] = 1

					if curStateTime>waitTime:
						stateSync=0
						if csVar.sesVarDict['useFlybackOpto'] == 1:
							pyState=8
							teensy.write('a8>'.encode('utf-8'))
						elif csVar.sesVarDict['useFlybackOpto'] == 0:
							pyState=7
							teensy.write('a7>'.encode('utf-8'))

				if pyState == 7 and stateSync==1:
					if sHeaders[pyState]==0:
						outSyncCount=0
						sHeaders[pyState]=1
						sHeaders[np.setdiff1d(sList,pyState)]=0                        

					if curStateTime>csVar.sesVarDict['minStim']:
						trialSamps[1]=loopCnt
						sampLog.append(np.diff(trialSamps)[0])
						stateSync=0
						pyState=1
						teensy.write('a1>'.encode('utf-8'))
						print('last trial took: {} seconds'.format(sampLog[-1]/1000))
						
				if pyState == 8 and stateSync==1:
					if sHeaders[pyState]==0:
						outSyncCount=0
						sHeaders[pyState]=1
						sHeaders[np.setdiff1d(sList,pyState)]=0                        

					if curStateTime>csVar.sesVarDict['minStim']:
						trialSamps[1]=loopCnt
						sampLog.append(np.diff(trialSamps)[0])
						stateSync=0
						pyState=1
						teensy.write('a1>'.encode('utf-8'))
						print('last trial took: {} seconds'.format(sampLog[-1]/1000))
				

		except:
			sesData.flush()
			np.save('sesData.npy',sesData)
			print(loopCnt)
			print(tString)
			sesData[intNum,x]=int(tString[x+1])
			if useGUI==1:
				csGui.toggleTaskButtons(1)
			
			csVar.sesVarDict['curSession']=csVar.sesVarDict['curSession']+1
			if useGUI:
				csGui.curSession_TV.set(csVar.sesVarDict['curSession'])

			teensy.write('a0>'.encode('utf-8'))
			time.sleep(0.05)
			teensy.write('a0>'.encode('utf-8'))

			print('finished {} trials'.format(csVar.sesVarDict['trialNum']-1))
			csVar.sesVarDict['trialNum']=0
			if useGUI==1:
				csVar.sesVarDict=csGui.updateDictFromGUI(csVar.sesVarDict)
			csVar.sesVarDict_bindings=csVar.dictToPandas(csVar.sesVarDict)
			csVar.sesVarDict_bindings.to_csv(csVar.sesVarDict['dirPath'] + '/' +'sesVars.csv')
			
			tSessionNum = csVar.sesVarDict['curSession']-1
			f["session_{}".format(tSessionNum)]=sesData[0:loopCnt,:]
			for x in csVar.sensory['varsToUse']:
				f["session_{}".format(tSessionNum)].attrs[x]=eval('csVar.' + x)
			for x in csVar.timing['varsToUse']:
				f["session_{}".format(tSessionNum)].attrs[x]=eval('csVar.' + x)
			for x in csVar.optical['varsToUse']:
				f["session_{}".format(tSessionNum)].attrs[x]=eval('csVar.' + x)

			f["session_{}".format(tSessionNum)].attrs['stimTrials']=stimTrials
			f["session_{}".format(tSessionNum)].attrs['maskTrials']=maskTrials
			f["session_{}".format(tSessionNum)].attrs['trialDurs']=sampLog
			f.close()

			

			# Update MQTT Feeds
			if csVar.sesVarDict['logMQTT']:
				try:
					csVar.sesVarDict['curWeight']=(np.mean(sesData[-1000:-1,4])-csVar.sesVarDict['loadBaseline'])*0.1
					csAIO.rigOffLog(aio,csVar.sesVarDict['subjID'],\
						csVar.sesVarDict['curWeight'],\
						curMachine,csVar.sesVarDict['mqttUpDel'])

					# update animal's water consumed feed.
					csVar.sesVarDict['waterConsumed']=int(csVar.sesVarDict['waterConsumed']*10000)/10000
					aio.send('{}-waterconsumed'.format(csVar.sesVarDict['subjID']),csVar.sesVarDict['waterConsumed'])
					topAmount=csVar.sesVarDict['consumpTarg']-csVar.sesVarDict['waterConsumed']
					topAmount=int(topAmount*10000)/10000
					if topAmount<0:
						topAmount=0
				 
					print('give {:0.3f} ml later by 12 hrs from now'.format(topAmount))
					aio.send('{}-topvol'.format(csVar.sesVarDict['subjID']),topAmount)
				except:
					pass
			if useGUI==1:
				csVar.sesVarDict=csGui.updateDictFromGUI(csVar.sesVarDict)
			csVar.sesVarDict_bindings=csVar.dictToPandas(csVar.sesVarDict)
			csVar.sesVarDict_bindings.to_csv(csVar.sesVarDict['dirPath'] + '/' +'sesVars.csv')

			csSer.flushBuffer(teensy) 
			teensy.close()
			csVar.sesVarDict['canQuit']=1
			if useGUI==1:
				csGui.quitButton['text']="Quit"
						 

	tSessionNum = csVar.sesVarDict['curSession']
	f["session_{}".format(tSessionNum)]=sesData[0:loopCnt,:]
	for x in csVar.sensory['varsToUse']:
		f["session_{}".format(tSessionNum)].attrs[x]=eval('csVar.' + x)
	for x in csVar.timing['varsToUse']:
		f["session_{}".format(tSessionNum)].attrs[x]=eval('csVar.' + x)
	for x in csVar.optical['varsToUse']:
		f["session_{}".format(tSessionNum)].attrs[x]=eval('csVar.' + x)

	f["session_{}".format(tSessionNum)].attrs['stimTrials']=stimTrials
	f["session_{}".format(tSessionNum)].attrs['maskTrials']=maskTrials
	f["session_{}".format(tSessionNum)].attrs['trialDurs']=sampLog
	f.close()
		
	if useGUI==1:
		csGui.toggleTaskButtons(1)
	
	csVar.sesVarDict['curSession']=csVar.sesVarDict['curSession']+1
	if useGUI==1:
		csGui.curSession_TV.set(csVar.sesVarDict['curSession'])
	
	teensy.write('a0>'.encode('utf-8'))
	time.sleep(0.05)
	teensy.write('a0>'.encode('utf-8'))

	print('finished {} trials'.format(csVar.sesVarDict['trialNum']-1))
	csVar.sesVarDict['trialNum']=0

	# Update MQTT Feeds
	if csVar.sesVarDict['logMQTT']:
		try:
			csVar.sesVarDict['curWeight']=(np.mean(sesData[loopCnt-plotSamps:loopCnt,4])-\
				csVar.sesVarDict['loadBaseline'])*0.1
			csVar.sesVarDict['waterConsumed']=int(csVar.sesVarDict['waterConsumed']*10000)/10000
			topAmount=csVar.sesVarDict['consumpTarg']-csVar.sesVarDict['waterConsumed']
			topAmount=int(topAmount*10000)/10000
			if topAmount<0:
				topAmount=0
			print('give {:0.3f} ml later by 12 hrs from now'.format(topAmount))

			try:
				csAIO.rigOffLog(aio,csVar.sesVarDict['subjID'],\
					csVar.sesVarDict['curWeight'],curMachine,csVar.sesVarDict['mqttUpDel'])
				aio.send('{}-waterconsumed'.format(csVar.sesVarDict['subjID']),csVar.sesVarDict['waterConsumed'])
				aio.send('{}-topvol'.format(csVar.sesVarDict['subjID']),topAmount)
			except:
				print('failed to log mqtt info')
	   
			# update animal's water consumed feed.

			try:
				gDStamp=datetime.datetime.now().strftime("%m/%d/%Y")
				gTStamp=datetime.datetime.now().strftime("%H:%M:%S")
			except:
				print('did not log to google sheet')
		
			try:
				print('attempting to log to sheet')
				gSheet=csAIO.openGoogleSheet(gHashPath)
				canLog=1
			except:
				print('failed to open google sheet')
				canLog=0
		
			if canLog==1:
				try:
					csAIO.updateGoogleSheet(gSheet,csVar.sesVarDict['subjID'],\
						'Weight Post',csVar.sesVarDict['curWeight'])
					print('gsheet: logged weight')
					csAIO.updateGoogleSheet(gSheet,csVar.sesVarDict['subjID'],\
						'Delivered',csVar.sesVarDict['waterConsumed'])
					print('gsheet: logged consumption')
					csAIO.updateGoogleSheet(gSheet,csVar.sesVarDict['subjID'],\
						'Place',curMachine)
					print('gsheet: logged rig')
					csAIO.updateGoogleSheet(gSheet,csVar.sesVarDict['subjID'],\
						'Date Stamp',gDStamp)
					print('gsheet: logged date')
					csAIO.updateGoogleSheet(gSheet,csVar.sesVarDict['subjID'],\
						'Time Stamp',gTStamp)
					print('gsheet: logged time')
				except:
					print('did not log some things')
		except:
			print("failed to log")

	print('finished your session')
	csGUI.refreshPandas(csVar.sesVarDict,csVar.sensory,csVar.timing,csVar.optical,useGUI)
	csVar.sesVarDict['canQuit']=1
	csSer.flushBuffer(teensy)
	teensy.close()
	if useGUI==1:
		csGui.quitButton['text']="Quit"